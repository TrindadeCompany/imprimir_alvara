# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imprimirAlvara
                                 A QGIS plugin
 Imprimir Alvará 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Trindade Company
        email                : trindadeapp@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QLineEdit

from qgis.core import *
import qgis.utils
import processing

from PyQt5.QtWidgets import QAction, QFileDialog, QLabel

import docx
from docx.shared import Pt
from docx.shared import Inches
import datetime

from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .imprimir_alvara_dialog import imprimirAlvaraDialog
import os.path


class imprimirAlvara:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'imprimirAlvara_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Imprimir Alvará')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('imprimirAlvara', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/imprimir_alvara/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Imprimir Alvará '),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Imprimir Alvará'),
                action)
            self.iface.removeToolBarIcon(action)


    def selecionar_teste(self):
        
        
        
    
        ####################################################################################
        # ESSA PARTE RECEBE O TEXTO QUE O USUARIO DIGITA
        
        userinput = self.dlg.lineEdit.text()
        id = "Você encontrou o ID do seu Alvará numero:" + userinput
        self.dlg.label_id.setText(id)
        
        ####################################################################################
        # ESSA PARTE BUSCA AS INFORMAÇÕES      
        
        
        num = int(userinput) + 0  
        vlayer = QgsVectorLayer("C:/Users/jefer/Desktop/IPTU/Sistema InfraEstrutura/Alvara.gpkg", "Data", "ogr")
        # select only the first feature to make the output shorter
        vlayer.selectByIds([num])

        fid, ok = QgsVectorLayerUtils.getValues(vlayer, "fid", selectedOnly=True)
        print(str(fid).strip('[]'))

        Codigo_Requerimento, ok = QgsVectorLayerUtils.getValues(vlayer, "Codigo_Requerimento", selectedOnly=True)
        print(str(Codigo_Requerimento).strip('[]'))

        Nome_Proprietario, ok = QgsVectorLayerUtils.getValues(vlayer, "Nome_Proprietario", selectedOnly=True)
        print(', '.join(Nome_Proprietario))

        CNPJCPF_PROPRIETARIOS, ok = QgsVectorLayerUtils.getValues(vlayer, "CNPJCPF_PROPRIETARIOS", selectedOnly=True)
        print(', '.join(CNPJCPF_PROPRIETARIOS))

        Nome_autor_projeto, ok = QgsVectorLayerUtils.getValues(vlayer, "Nome_autor_projeto", selectedOnly=True)
        print(', '.join(Nome_autor_projeto))

        CREA, ok = QgsVectorLayerUtils.getValues(vlayer, "CREA", selectedOnly=True)
        print(', '.join(CREA))

        ART, ok = QgsVectorLayerUtils.getValues(vlayer, "ART", selectedOnly=True)
        print(', '.join(ART))

        Nome_construtora, ok = QgsVectorLayerUtils.getValues(vlayer, "Nome_construtora", selectedOnly=True)
        print(', '.join(Nome_construtora))


        CNPJCPF_construtora, ok = QgsVectorLayerUtils.getValues(vlayer, "CNPJCPF_construtora", selectedOnly=True)
        print(', '.join(CNPJCPF_construtora))

        Area_construida, ok = QgsVectorLayerUtils.getValues(vlayer, "Area_construida", selectedOnly=True)
        print(str(Area_construida).strip('[]'))

        Responsavel_prefeitura, ok = QgsVectorLayerUtils.getValues(vlayer, "Responsavel_prefeitura", selectedOnly=True)
        print(', '.join(Responsavel_prefeitura))

        Especificacao_obra, ok = QgsVectorLayerUtils.getValues(vlayer, "Especificacao_obra", selectedOnly=True)
        print(', '.join(Especificacao_obra))

        Observacao, ok = QgsVectorLayerUtils.getValues(vlayer, "Observacao", selectedOnly=True)
        print(', '.join(Observacao))

        Endereco_Obra, ok = QgsVectorLayerUtils.getValues(vlayer, "Endereco_Obra", selectedOnly=True)
        print(', '.join(Endereco_Obra))

        Data, ok = QgsVectorLayerUtils.getValues(vlayer, "Data", selectedOnly=True)
        Date1 = str(Data).strip('[]')
        print(Date1[19]+Date1[20]+Date1[21]+Date1[22]+Date1[23]+Date1[24]+Date1[25]+Date1[26]+Date1[27]+Date1[28]+Date1[29])
        Data_final = Date1[19]+Date1[20]+Date1[21]+Date1[22]+Date1[23]+Date1[24]+Date1[25]+Date1[26]+Date1[27]+Date1[28]+Date1[29]

        Nome_tecnico, ok = QgsVectorLayerUtils.getValues(vlayer, "Nome_tecnico", selectedOnly=True)
        print(', '.join(Nome_tecnico))

        CREA_tecnico, ok = QgsVectorLayerUtils.getValues(vlayer, "CREA_tecnico", selectedOnly=True)
        print(str(CREA_tecnico).strip('[]'))

        ART_tecnico, ok = QgsVectorLayerUtils.getValues(vlayer, "ART_tecnico", selectedOnly=True)
        print(str(ART_tecnico).strip('[]'))

        Numero_Processo, ok = QgsVectorLayerUtils.getValues(vlayer, "Numero_Processo", selectedOnly=True)
        print(', '.join(Numero_Processo))
        
        

        

        ####################################################################################
        # ESSA PARTE SALVA EM ARQUIVO
        
        doc = docx.Document("C:/Users/jefer/Desktop/IPTU/Sistema InfraEstrutura/Modelos Docs/formulário alvará de construção.docx")
        #a list of all tables in document
        doc.tables 

        # ID
        core_properties = doc.core_properties
        core_properties.keywords
        core_properties.keywords = str(fid).strip('[]')
        core_properties.keywords
        # Data
        core_properties = doc.core_properties
        core_properties.category
        core_properties.category = Date1[19]+Date1[20]+Date1[21]+Date1[22]+Date1[23]+Date1[24]+Date1[25]+Date1[26]+Date1[27]+Date1[28]+Date1[29]
        core_properties.category

        doc.tables[0].cell(2, 0).text = "PROPRIETÁRIO (A):  " +', '.join(Nome_Proprietario)
        doc.tables[0].cell(3, 0).text = "CPF/CNPJ:  " + ', '.join(CNPJCPF_PROPRIETARIOS)

        doc.tables[0].cell(4, 0).text = "AUTOR DO PROJETO:  " +"\nNOME: "  + ', '.join(Nome_autor_projeto)
        doc.tables[0].cell(5, 0).text = "CREA: " + ', '.join(CREA) + "    BA/ART/RRT PROJETO: " + ', '.join(ART)

        doc.tables[0].cell(6, 0).text = "RESPONSÁVEL TÉCNICO:  " + "\nNOME: "  + ', '.join(Nome_tecnico)
        doc.tables[0].cell(7, 0).text = "CREA: " + str(CREA_tecnico).strip('[]') + "    BA/ART/RRT PROJETO: " + str(ART_tecnico).strip('[]')

        doc.tables[0].cell(8, 0).text = "FIRMA CONSTRUTORA OU RESPONSÁVEL PELA EXECUÇÃO DA OBRA: " + "\nNOME: "  + ', '.join(Nome_construtora)
        doc.tables[0].cell(9, 0).text = "CPF/CNPJ/CREA/CAU: : " + ', '.join(CNPJCPF_construtora)

        texto1 = "Tendo em vista o constante no processo nº " + ', '.join(Numero_Processo) + " fica concedida a licença para Construção, em "
        texto2 = Data_final + " a obra denominada de " + ', '.join(Especificacao_obra) + " a ser construída na " + ', '.join(Endereco_Obra)
        texto3 = ", com área total da construção de " + str(Area_construida).strip('[]') + " m². Que se realizará em observância completa das Leis em vigor nesta Prefeitura e de acordo com as informações ou parecer das Secções de Construções Particulares e de Urbanismo desta Prefeitura, sob as penas das multas combinadas por infração das respectivas leis e posturas, além da obrigação de desmanchar as obras que tenham sido executadas em desacordo com o projeto, ou com informações e pareceres acima mencionados. "

        texto_final = texto1 + texto2 + texto3

        doc.tables[0].cell(10, 0).text = texto_final

        doc.tables[0].cell(12, 0).text = "Especificação: " +', '.join(Especificacao_obra)
        doc.tables[0].cell(13, 0).text = "Observacao: " +', '.join(Observacao)
                
        
        
        ####################################################################################
        # NESSA PARTE O USUARIO ESCOLHER O LOCAL PARA SALVAR OS ARQUIVOS
    
        filename, _filter = QFileDialog.getSaveFileName(
         self.dlg, "Selecione seus arquivos ","", '*.docx')
        self.dlg.lineEdit_Local.setText(filename)

        doc.save(filename)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = imprimirAlvaraDialog()
            self.dlg.pushButton_2.clicked.connect(self.selecionar_teste)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
